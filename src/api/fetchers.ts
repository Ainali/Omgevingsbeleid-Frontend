/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * This API serves all the object that make up the policies of a provincial government
 * OpenAPI spec version: 0.0.2
 */
import {
    useQuery,
    useMutation,
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from 'react-query'

import type {
    AmbitiesRead,
    GetAmbities400,
    GetAmbitiesParams,
    PostAmbities400,
    PostAmbities403,
    PostAmbities500,
    AmbitiesWrite,
    GetAmbitiesLineageId404,
    GetAmbitiesLineageIdParams,
    PatchAmbitiesLineageId400,
    PatchAmbitiesLineageId403,
    PatchAmbitiesLineageId500,
    BelangenRead,
    GetBelangen400,
    GetBelangenParams,
    PostBelangen400,
    PostBelangen403,
    PostBelangen500,
    BelangenWrite,
    GetBelangenLineageId404,
    GetBelangenLineageIdParams,
    PatchBelangenLineageId400,
    PatchBelangenLineageId403,
    PatchBelangenLineageId500,
    BeleidsdoelenRead,
    GetBeleidsdoelen400,
    GetBeleidsdoelenParams,
    PostBeleidsdoelen400,
    PostBeleidsdoelen403,
    PostBeleidsdoelen500,
    BeleidsdoelenWrite,
    GetBeleidsdoelenLineageId404,
    GetBeleidsdoelenLineageIdParams,
    PatchBeleidsdoelenLineageId400,
    PatchBeleidsdoelenLineageId403,
    PatchBeleidsdoelenLineageId500,
    BeleidskeuzesRead,
    GetBeleidskeuzes400,
    GetBeleidskeuzesParams,
    PostBeleidskeuzes400,
    PostBeleidskeuzes403,
    PostBeleidskeuzes500,
    BeleidskeuzesWrite,
    GetBeleidskeuzesLineageId404,
    GetBeleidskeuzesLineageIdParams,
    PatchBeleidskeuzesLineageId400,
    PatchBeleidskeuzesLineageId403,
    PatchBeleidskeuzesLineageId500,
    BeleidsmodulesRead,
    GetBeleidsmodules400,
    GetBeleidsmodulesParams,
    PostBeleidsmodules400,
    PostBeleidsmodules403,
    PostBeleidsmodules500,
    BeleidsmodulesWrite,
    GetBeleidsmodulesLineageId404,
    GetBeleidsmodulesLineageIdParams,
    PatchBeleidsmodulesLineageId400,
    PatchBeleidsmodulesLineageId403,
    PatchBeleidsmodulesLineageId500,
    BeleidsprestatiesRead,
    GetBeleidsprestaties400,
    GetBeleidsprestatiesParams,
    PostBeleidsprestaties400,
    PostBeleidsprestaties403,
    PostBeleidsprestaties500,
    BeleidsprestatiesWrite,
    GetBeleidsprestatiesLineageId404,
    GetBeleidsprestatiesLineageIdParams,
    PatchBeleidsprestatiesLineageId400,
    PatchBeleidsprestatiesLineageId403,
    PatchBeleidsprestatiesLineageId500,
    BeleidsregelsRead,
    GetBeleidsregels400,
    GetBeleidsregelsParams,
    PostBeleidsregels400,
    PostBeleidsregels403,
    PostBeleidsregels500,
    BeleidsregelsWrite,
    GetBeleidsregelsLineageId404,
    GetBeleidsregelsLineageIdParams,
    PatchBeleidsregelsLineageId400,
    PatchBeleidsregelsLineageId403,
    PatchBeleidsregelsLineageId500,
    BeleidsrelatiesRead,
    GetBeleidsrelaties400,
    GetBeleidsrelatiesParams,
    PostBeleidsrelaties400,
    PostBeleidsrelaties403,
    PostBeleidsrelaties500,
    BeleidsrelatiesWrite,
    GetBeleidsrelatiesLineageId404,
    GetBeleidsrelatiesLineageIdParams,
    PatchBeleidsrelatiesLineageId400,
    PatchBeleidsrelatiesLineageId403,
    PatchBeleidsrelatiesLineageId500,
    GetChangesAmbitiesOldUuidNewUuid200,
    GetChangesAmbitiesOldUuidNewUuid404,
    GetChangesAmbitiesOldUuidNewUuid500,
    GetChangesBelangenOldUuidNewUuid200,
    GetChangesBelangenOldUuidNewUuid404,
    GetChangesBelangenOldUuidNewUuid500,
    GetChangesBeleidsdoelenOldUuidNewUuid200,
    GetChangesBeleidsdoelenOldUuidNewUuid404,
    GetChangesBeleidsdoelenOldUuidNewUuid500,
    GetChangesBeleidskeuzesOldUuidNewUuid200,
    GetChangesBeleidskeuzesOldUuidNewUuid404,
    GetChangesBeleidskeuzesOldUuidNewUuid500,
    GetChangesBeleidsmodulesOldUuidNewUuid200,
    GetChangesBeleidsmodulesOldUuidNewUuid404,
    GetChangesBeleidsmodulesOldUuidNewUuid500,
    GetChangesBeleidsprestatiesOldUuidNewUuid200,
    GetChangesBeleidsprestatiesOldUuidNewUuid404,
    GetChangesBeleidsprestatiesOldUuidNewUuid500,
    GetChangesBeleidsregelsOldUuidNewUuid200,
    GetChangesBeleidsregelsOldUuidNewUuid404,
    GetChangesBeleidsregelsOldUuidNewUuid500,
    GetChangesBeleidsrelatiesOldUuidNewUuid200,
    GetChangesBeleidsrelatiesOldUuidNewUuid404,
    GetChangesBeleidsrelatiesOldUuidNewUuid500,
    GetChangesMaatregelenOldUuidNewUuid200,
    GetChangesMaatregelenOldUuidNewUuid404,
    GetChangesMaatregelenOldUuidNewUuid500,
    GetChangesThemasOldUuidNewUuid200,
    GetChangesThemasOldUuidNewUuid404,
    GetChangesThemasOldUuidNewUuid500,
    GetChangesVerordeningenOldUuidNewUuid200,
    GetChangesVerordeningenOldUuidNewUuid404,
    GetChangesVerordeningenOldUuidNewUuid500,
    GetChangesWerkingsgebiedenOldUuidNewUuid200,
    GetChangesWerkingsgebiedenOldUuidNewUuid404,
    GetChangesWerkingsgebiedenOldUuidNewUuid500,
    MaatregelenRead,
    GetMaatregelen400,
    GetMaatregelenParams,
    PostMaatregelen400,
    PostMaatregelen403,
    PostMaatregelen500,
    MaatregelenWrite,
    GetMaatregelenLineageId404,
    GetMaatregelenLineageIdParams,
    PatchMaatregelenLineageId400,
    PatchMaatregelenLineageId403,
    PatchMaatregelenLineageId500,
    GetSearch200Item,
    GetSearch400,
    GetSearch403,
    GetSearchParams,
    ThemasRead,
    GetThemas400,
    GetThemasParams,
    PostThemas400,
    PostThemas403,
    PostThemas500,
    ThemasWrite,
    GetThemasLineageId404,
    GetThemasLineageIdParams,
    PatchThemasLineageId400,
    PatchThemasLineageId403,
    PatchThemasLineageId500,
    GetValidAmbities404,
    GetValidAmbitiesParams,
    GetValidAmbitiesLineageId404,
    GetValidAmbitiesLineageIdParams,
    GetValidBelangen404,
    GetValidBelangenParams,
    GetValidBelangenLineageId404,
    GetValidBelangenLineageIdParams,
    GetValidBeleidsdoelen404,
    GetValidBeleidsdoelenParams,
    GetValidBeleidsdoelenLineageId404,
    GetValidBeleidsdoelenLineageIdParams,
    GetValidBeleidskeuzes404,
    GetValidBeleidskeuzesParams,
    GetValidBeleidskeuzesLineageId404,
    GetValidBeleidskeuzesLineageIdParams,
    GetValidBeleidsmodules404,
    GetValidBeleidsmodulesParams,
    GetValidBeleidsmodulesLineageId404,
    GetValidBeleidsmodulesLineageIdParams,
    GetValidBeleidsprestaties404,
    GetValidBeleidsprestatiesParams,
    GetValidBeleidsprestatiesLineageId404,
    GetValidBeleidsprestatiesLineageIdParams,
    GetValidBeleidsregels404,
    GetValidBeleidsregelsParams,
    GetValidBeleidsregelsLineageId404,
    GetValidBeleidsregelsLineageIdParams,
    GetValidBeleidsrelaties404,
    GetValidBeleidsrelatiesParams,
    GetValidBeleidsrelatiesLineageId404,
    GetValidBeleidsrelatiesLineageIdParams,
    GetValidMaatregelen404,
    GetValidMaatregelenParams,
    GetValidMaatregelenLineageId404,
    GetValidMaatregelenLineageIdParams,
    GetValidThemas404,
    GetValidThemasParams,
    GetValidThemasLineageId404,
    GetValidThemasLineageIdParams,
    VerordeningenRead,
    GetValidVerordeningen404,
    GetValidVerordeningenParams,
    GetValidVerordeningenLineageId404,
    GetValidVerordeningenLineageIdParams,
    WerkingsgebiedenRead,
    GetValidWerkingsgebieden404,
    GetValidWerkingsgebiedenParams,
    GetValidWerkingsgebiedenLineageId404,
    GetValidWerkingsgebiedenLineageIdParams,
    GetVerordeningen400,
    GetVerordeningenParams,
    PostVerordeningen400,
    PostVerordeningen403,
    PostVerordeningen500,
    VerordeningenWrite,
    GetVerordeningenLineageId404,
    GetVerordeningenLineageIdParams,
    PatchVerordeningenLineageId400,
    PatchVerordeningenLineageId403,
    PatchVerordeningenLineageId500,
    GetVersionAmbitiesObjectUuid404,
    GetVersionBelangenObjectUuid404,
    GetVersionBeleidsdoelenObjectUuid404,
    GetVersionBeleidskeuzesObjectUuid404,
    GetVersionBeleidsmodulesObjectUuid404,
    GetVersionBeleidsprestatiesObjectUuid404,
    GetVersionBeleidsregelsObjectUuid404,
    GetVersionBeleidsrelatiesObjectUuid404,
    GetVersionMaatregelenObjectUuid404,
    GetVersionThemasObjectUuid404,
    GetVersionVerordeningenObjectUuid404,
    GetVersionWerkingsgebiedenObjectUuid404,
    GetWerkingsgebieden400,
    GetWerkingsgebiedenParams,
    GetWerkingsgebiedenLineageId404,
    GetWerkingsgebiedenLineageIdParams,
} from './fetchers.schemas'
import { customInstance } from './instance'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
    ...args: any
) => Promise<infer R>
    ? R
    : any

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getAmbities = (params?: GetAmbitiesParams) => {
    return customInstance<AmbitiesRead[]>({
        url: `/ambities`,
        method: 'get',
        params,
    })
}

export const getGetAmbitiesQueryKey = (params?: GetAmbitiesParams) => [
    `/ambities`,
    ...(params ? [params] : []),
]

export const useGetAmbities = <
    TData = AsyncReturnType<typeof getAmbities>,
    TError = GetAmbities400
>(
    params?: GetAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getAmbities>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetAmbitiesQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getAmbities>> = () =>
        getAmbities(params)

    const query = useQuery<AsyncReturnType<typeof getAmbities>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    )

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new ambities lineage
 */
export const postAmbities = (ambitiesWrite: AmbitiesWrite) => {
    return customInstance<AmbitiesRead>({
        url: `/ambities`,
        method: 'post',
        data: ambitiesWrite,
    })
}

export const usePostAmbities = <
    TError = PostAmbities400 | PostAmbities403 | PostAmbities500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postAmbities>,
        TError,
        { data: AmbitiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postAmbities>,
        { data: AmbitiesWrite }
    > = props => {
        const { data } = props || {}

        return postAmbities(data)
    }

    return useMutation<
        AsyncReturnType<typeof postAmbities>,
        TError,
        { data: AmbitiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getAmbitiesLineageId = (
    lineageId: number,
    params?: GetAmbitiesLineageIdParams
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/ambities/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetAmbitiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetAmbitiesLineageIdParams
) => [`/ambities/${lineageId}`, ...(params ? [params] : [])]

export const useGetAmbitiesLineageId = <
    TData = AsyncReturnType<typeof getAmbitiesLineageId>,
    TError = GetAmbitiesLineageId404
>(
    lineageId: number,
    params?: GetAmbitiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getAmbitiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAmbitiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getAmbitiesLineageId>
    > = () => getAmbitiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getAmbitiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new ambities to a lineage
 */
export const patchAmbitiesLineageId = (
    lineageId: number,
    ambitiesWrite: AmbitiesWrite
) => {
    return customInstance<AmbitiesRead>({
        url: `/ambities/${lineageId}`,
        method: 'patch',
        data: ambitiesWrite,
    })
}

export const usePatchAmbitiesLineageId = <
    TError =
        | PatchAmbitiesLineageId400
        | PatchAmbitiesLineageId403
        | PatchAmbitiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchAmbitiesLineageId>,
        TError,
        { lineageId: number; data: AmbitiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchAmbitiesLineageId>,
        { lineageId: number; data: AmbitiesWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchAmbitiesLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchAmbitiesLineageId>,
        TError,
        { lineageId: number; data: AmbitiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getBelangen = (params?: GetBelangenParams) => {
    return customInstance<BelangenRead[]>({
        url: `/belangen`,
        method: 'get',
        params,
    })
}

export const getGetBelangenQueryKey = (params?: GetBelangenParams) => [
    `/belangen`,
    ...(params ? [params] : []),
]

export const useGetBelangen = <
    TData = AsyncReturnType<typeof getBelangen>,
    TError = GetBelangen400
>(
    params?: GetBelangenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBelangen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetBelangenQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getBelangen>> = () =>
        getBelangen(params)

    const query = useQuery<AsyncReturnType<typeof getBelangen>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    )

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new belangen lineage
 */
export const postBelangen = (belangenWrite: BelangenWrite) => {
    return customInstance<BelangenRead>({
        url: `/belangen`,
        method: 'post',
        data: belangenWrite,
    })
}

export const usePostBelangen = <
    TError = PostBelangen400 | PostBelangen403 | PostBelangen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBelangen>,
        TError,
        { data: BelangenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBelangen>,
        { data: BelangenWrite }
    > = props => {
        const { data } = props || {}

        return postBelangen(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBelangen>,
        TError,
        { data: BelangenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getBelangenLineageId = (
    lineageId: number,
    params?: GetBelangenLineageIdParams
) => {
    return customInstance<BelangenRead[]>({
        url: `/belangen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBelangenLineageIdQueryKey = (
    lineageId: number,
    params?: GetBelangenLineageIdParams
) => [`/belangen/${lineageId}`, ...(params ? [params] : [])]

export const useGetBelangenLineageId = <
    TData = AsyncReturnType<typeof getBelangenLineageId>,
    TError = GetBelangenLineageId404
>(
    lineageId: number,
    params?: GetBelangenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBelangenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBelangenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBelangenLineageId>
    > = () => getBelangenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBelangenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new belangen to a lineage
 */
export const patchBelangenLineageId = (
    lineageId: number,
    belangenWrite: BelangenWrite
) => {
    return customInstance<BelangenRead>({
        url: `/belangen/${lineageId}`,
        method: 'patch',
        data: belangenWrite,
    })
}

export const usePatchBelangenLineageId = <
    TError =
        | PatchBelangenLineageId400
        | PatchBelangenLineageId403
        | PatchBelangenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBelangenLineageId>,
        TError,
        { lineageId: number; data: BelangenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBelangenLineageId>,
        { lineageId: number; data: BelangenWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBelangenLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBelangenLineageId>,
        TError,
        { lineageId: number; data: BelangenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getBeleidsdoelen = (params?: GetBeleidsdoelenParams) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/beleidsdoelen`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsdoelenQueryKey = (
    params?: GetBeleidsdoelenParams
) => [`/beleidsdoelen`, ...(params ? [params] : [])]

export const useGetBeleidsdoelen = <
    TData = AsyncReturnType<typeof getBeleidsdoelen>,
    TError = GetBeleidsdoelen400
>(
    params?: GetBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsdoelen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsdoelen>
    > = () => getBeleidsdoelen(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsdoelen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidsdoelen lineage
 */
export const postBeleidsdoelen = (beleidsdoelenWrite: BeleidsdoelenWrite) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/beleidsdoelen`,
        method: 'post',
        data: beleidsdoelenWrite,
    })
}

export const usePostBeleidsdoelen = <
    TError = PostBeleidsdoelen400 | PostBeleidsdoelen403 | PostBeleidsdoelen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidsdoelen>,
        TError,
        { data: BeleidsdoelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidsdoelen>,
        { data: BeleidsdoelenWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidsdoelen(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidsdoelen>,
        TError,
        { data: BeleidsdoelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getBeleidsdoelenLineageId = (
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsdoelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams
) => [`/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidsdoelenLineageId = <
    TData = AsyncReturnType<typeof getBeleidsdoelenLineageId>,
    TError = GetBeleidsdoelenLineageId404
>(
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsdoelenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsdoelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsdoelenLineageId>
    > = () => getBeleidsdoelenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsdoelenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidsdoelen to a lineage
 */
export const patchBeleidsdoelenLineageId = (
    lineageId: number,
    beleidsdoelenWrite: BeleidsdoelenWrite
) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/beleidsdoelen/${lineageId}`,
        method: 'patch',
        data: beleidsdoelenWrite,
    })
}

export const usePatchBeleidsdoelenLineageId = <
    TError =
        | PatchBeleidsdoelenLineageId400
        | PatchBeleidsdoelenLineageId403
        | PatchBeleidsdoelenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidsdoelenLineageId>,
        TError,
        { lineageId: number; data: BeleidsdoelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidsdoelenLineageId>,
        { lineageId: number; data: BeleidsdoelenWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidsdoelenLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidsdoelenLineageId>,
        TError,
        { lineageId: number; data: BeleidsdoelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getBeleidskeuzes = (params?: GetBeleidskeuzesParams) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/beleidskeuzes`,
        method: 'get',
        params,
    })
}

export const getGetBeleidskeuzesQueryKey = (
    params?: GetBeleidskeuzesParams
) => [`/beleidskeuzes`, ...(params ? [params] : [])]

export const useGetBeleidskeuzes = <
    TData = AsyncReturnType<typeof getBeleidskeuzes>,
    TError = GetBeleidskeuzes400
>(
    params?: GetBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidskeuzes>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidskeuzes>
    > = () => getBeleidskeuzes(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidskeuzes>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidskeuzes lineage
 */
export const postBeleidskeuzes = (beleidskeuzesWrite: BeleidskeuzesWrite) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/beleidskeuzes`,
        method: 'post',
        data: beleidskeuzesWrite,
    })
}

export const usePostBeleidskeuzes = <
    TError = PostBeleidskeuzes400 | PostBeleidskeuzes403 | PostBeleidskeuzes500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidskeuzes>,
        TError,
        { data: BeleidskeuzesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidskeuzes>,
        { data: BeleidskeuzesWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidskeuzes(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidskeuzes>,
        TError,
        { data: BeleidskeuzesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getBeleidskeuzesLineageId = (
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidskeuzesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams
) => [`/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidskeuzesLineageId = <
    TData = AsyncReturnType<typeof getBeleidskeuzesLineageId>,
    TError = GetBeleidskeuzesLineageId404
>(
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidskeuzesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidskeuzesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidskeuzesLineageId>
    > = () => getBeleidskeuzesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidskeuzesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidskeuzes to a lineage
 */
export const patchBeleidskeuzesLineageId = (
    lineageId: number,
    beleidskeuzesWrite: BeleidskeuzesWrite
) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/beleidskeuzes/${lineageId}`,
        method: 'patch',
        data: beleidskeuzesWrite,
    })
}

export const usePatchBeleidskeuzesLineageId = <
    TError =
        | PatchBeleidskeuzesLineageId400
        | PatchBeleidskeuzesLineageId403
        | PatchBeleidskeuzesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidskeuzesLineageId>,
        TError,
        { lineageId: number; data: BeleidskeuzesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidskeuzesLineageId>,
        { lineageId: number; data: BeleidskeuzesWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidskeuzesLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidskeuzesLineageId>,
        TError,
        { lineageId: number; data: BeleidskeuzesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getBeleidsmodules = (params?: GetBeleidsmodulesParams) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/beleidsmodules`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsmodulesQueryKey = (
    params?: GetBeleidsmodulesParams
) => [`/beleidsmodules`, ...(params ? [params] : [])]

export const useGetBeleidsmodules = <
    TData = AsyncReturnType<typeof getBeleidsmodules>,
    TError = GetBeleidsmodules400
>(
    params?: GetBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsmodules>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsmodules>
    > = () => getBeleidsmodules(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsmodules>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidsmodules lineage
 */
export const postBeleidsmodules = (
    beleidsmodulesWrite: BeleidsmodulesWrite
) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/beleidsmodules`,
        method: 'post',
        data: beleidsmodulesWrite,
    })
}

export const usePostBeleidsmodules = <
    TError =
        | PostBeleidsmodules400
        | PostBeleidsmodules403
        | PostBeleidsmodules500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidsmodules>,
        TError,
        { data: BeleidsmodulesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidsmodules>,
        { data: BeleidsmodulesWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidsmodules(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidsmodules>,
        TError,
        { data: BeleidsmodulesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getBeleidsmodulesLineageId = (
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsmodulesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams
) => [`/beleidsmodules/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidsmodulesLineageId = <
    TData = AsyncReturnType<typeof getBeleidsmodulesLineageId>,
    TError = GetBeleidsmodulesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsmodulesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsmodulesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsmodulesLineageId>
    > = () => getBeleidsmodulesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsmodulesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidsmodules to a lineage
 */
export const patchBeleidsmodulesLineageId = (
    lineageId: number,
    beleidsmodulesWrite: BeleidsmodulesWrite
) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/beleidsmodules/${lineageId}`,
        method: 'patch',
        data: beleidsmodulesWrite,
    })
}

export const usePatchBeleidsmodulesLineageId = <
    TError =
        | PatchBeleidsmodulesLineageId400
        | PatchBeleidsmodulesLineageId403
        | PatchBeleidsmodulesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidsmodulesLineageId>,
        TError,
        { lineageId: number; data: BeleidsmodulesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidsmodulesLineageId>,
        { lineageId: number; data: BeleidsmodulesWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidsmodulesLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidsmodulesLineageId>,
        TError,
        { lineageId: number; data: BeleidsmodulesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getBeleidsprestaties = (params?: GetBeleidsprestatiesParams) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/beleidsprestaties`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsprestatiesQueryKey = (
    params?: GetBeleidsprestatiesParams
) => [`/beleidsprestaties`, ...(params ? [params] : [])]

export const useGetBeleidsprestaties = <
    TData = AsyncReturnType<typeof getBeleidsprestaties>,
    TError = GetBeleidsprestaties400
>(
    params?: GetBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsprestaties>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsprestaties>
    > = () => getBeleidsprestaties(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsprestaties>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidsprestaties lineage
 */
export const postBeleidsprestaties = (
    beleidsprestatiesWrite: BeleidsprestatiesWrite
) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/beleidsprestaties`,
        method: 'post',
        data: beleidsprestatiesWrite,
    })
}

export const usePostBeleidsprestaties = <
    TError =
        | PostBeleidsprestaties400
        | PostBeleidsprestaties403
        | PostBeleidsprestaties500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidsprestaties>,
        TError,
        { data: BeleidsprestatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidsprestaties>,
        { data: BeleidsprestatiesWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidsprestaties(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidsprestaties>,
        TError,
        { data: BeleidsprestatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getBeleidsprestatiesLineageId = (
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/beleidsprestaties/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsprestatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams
) => [`/beleidsprestaties/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidsprestatiesLineageId = <
    TData = AsyncReturnType<typeof getBeleidsprestatiesLineageId>,
    TError = GetBeleidsprestatiesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsprestatiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsprestatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsprestatiesLineageId>
    > = () => getBeleidsprestatiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsprestatiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidsprestaties to a lineage
 */
export const patchBeleidsprestatiesLineageId = (
    lineageId: number,
    beleidsprestatiesWrite: BeleidsprestatiesWrite
) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/beleidsprestaties/${lineageId}`,
        method: 'patch',
        data: beleidsprestatiesWrite,
    })
}

export const usePatchBeleidsprestatiesLineageId = <
    TError =
        | PatchBeleidsprestatiesLineageId400
        | PatchBeleidsprestatiesLineageId403
        | PatchBeleidsprestatiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidsprestatiesLineageId>,
        TError,
        { lineageId: number; data: BeleidsprestatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidsprestatiesLineageId>,
        { lineageId: number; data: BeleidsprestatiesWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidsprestatiesLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidsprestatiesLineageId>,
        TError,
        { lineageId: number; data: BeleidsprestatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getBeleidsregels = (params?: GetBeleidsregelsParams) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/beleidsregels`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsregelsQueryKey = (
    params?: GetBeleidsregelsParams
) => [`/beleidsregels`, ...(params ? [params] : [])]

export const useGetBeleidsregels = <
    TData = AsyncReturnType<typeof getBeleidsregels>,
    TError = GetBeleidsregels400
>(
    params?: GetBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsregels>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsregels>
    > = () => getBeleidsregels(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsregels>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidsregels lineage
 */
export const postBeleidsregels = (beleidsregelsWrite: BeleidsregelsWrite) => {
    return customInstance<BeleidsregelsRead>({
        url: `/beleidsregels`,
        method: 'post',
        data: beleidsregelsWrite,
    })
}

export const usePostBeleidsregels = <
    TError = PostBeleidsregels400 | PostBeleidsregels403 | PostBeleidsregels500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidsregels>,
        TError,
        { data: BeleidsregelsWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidsregels>,
        { data: BeleidsregelsWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidsregels(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidsregels>,
        TError,
        { data: BeleidsregelsWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getBeleidsregelsLineageId = (
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/beleidsregels/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsregelsLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams
) => [`/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidsregelsLineageId = <
    TData = AsyncReturnType<typeof getBeleidsregelsLineageId>,
    TError = GetBeleidsregelsLineageId404
>(
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsregelsLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsregelsLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsregelsLineageId>
    > = () => getBeleidsregelsLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsregelsLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidsregels to a lineage
 */
export const patchBeleidsregelsLineageId = (
    lineageId: number,
    beleidsregelsWrite: BeleidsregelsWrite
) => {
    return customInstance<BeleidsregelsRead>({
        url: `/beleidsregels/${lineageId}`,
        method: 'patch',
        data: beleidsregelsWrite,
    })
}

export const usePatchBeleidsregelsLineageId = <
    TError =
        | PatchBeleidsregelsLineageId400
        | PatchBeleidsregelsLineageId403
        | PatchBeleidsregelsLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidsregelsLineageId>,
        TError,
        { lineageId: number; data: BeleidsregelsWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidsregelsLineageId>,
        { lineageId: number; data: BeleidsregelsWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidsregelsLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidsregelsLineageId>,
        TError,
        { lineageId: number; data: BeleidsregelsWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getBeleidsrelaties = (params?: GetBeleidsrelatiesParams) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/beleidsrelaties`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsrelatiesQueryKey = (
    params?: GetBeleidsrelatiesParams
) => [`/beleidsrelaties`, ...(params ? [params] : [])]

export const useGetBeleidsrelaties = <
    TData = AsyncReturnType<typeof getBeleidsrelaties>,
    TError = GetBeleidsrelaties400
>(
    params?: GetBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsrelaties>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsrelaties>
    > = () => getBeleidsrelaties(params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsrelaties>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new beleidsrelaties lineage
 */
export const postBeleidsrelaties = (
    beleidsrelatiesWrite: BeleidsrelatiesWrite
) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/beleidsrelaties`,
        method: 'post',
        data: beleidsrelatiesWrite,
    })
}

export const usePostBeleidsrelaties = <
    TError =
        | PostBeleidsrelaties400
        | PostBeleidsrelaties403
        | PostBeleidsrelaties500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postBeleidsrelaties>,
        TError,
        { data: BeleidsrelatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postBeleidsrelaties>,
        { data: BeleidsrelatiesWrite }
    > = props => {
        const { data } = props || {}

        return postBeleidsrelaties(data)
    }

    return useMutation<
        AsyncReturnType<typeof postBeleidsrelaties>,
        TError,
        { data: BeleidsrelatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getBeleidsrelatiesLineageId = (
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/beleidsrelaties/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetBeleidsrelatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams
) => [`/beleidsrelaties/${lineageId}`, ...(params ? [params] : [])]

export const useGetBeleidsrelatiesLineageId = <
    TData = AsyncReturnType<typeof getBeleidsrelatiesLineageId>,
    TError = GetBeleidsrelatiesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getBeleidsrelatiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsrelatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getBeleidsrelatiesLineageId>
    > = () => getBeleidsrelatiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getBeleidsrelatiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new beleidsrelaties to a lineage
 */
export const patchBeleidsrelatiesLineageId = (
    lineageId: number,
    beleidsrelatiesWrite: BeleidsrelatiesWrite
) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/beleidsrelaties/${lineageId}`,
        method: 'patch',
        data: beleidsrelatiesWrite,
    })
}

export const usePatchBeleidsrelatiesLineageId = <
    TError =
        | PatchBeleidsrelatiesLineageId400
        | PatchBeleidsrelatiesLineageId403
        | PatchBeleidsrelatiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchBeleidsrelatiesLineageId>,
        TError,
        { lineageId: number; data: BeleidsrelatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchBeleidsrelatiesLineageId>,
        { lineageId: number; data: BeleidsrelatiesWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchBeleidsrelatiesLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchBeleidsrelatiesLineageId>,
        TError,
        { lineageId: number; data: BeleidsrelatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesAmbitiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesAmbitiesOldUuidNewUuid200>({
        url: `/changes/ambities/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesAmbitiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/ambities/${oldUuid}/${newUuid}`]

export const useGetChangesAmbitiesOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesAmbitiesOldUuidNewUuid>,
    TError =
        | GetChangesAmbitiesOldUuidNewUuid404
        | GetChangesAmbitiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesAmbitiesOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesAmbitiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesAmbitiesOldUuidNewUuid>
    > = () => getChangesAmbitiesOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesAmbitiesOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBelangenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBelangenOldUuidNewUuid200>({
        url: `/changes/belangen/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBelangenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/belangen/${oldUuid}/${newUuid}`]

export const useGetChangesBelangenOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBelangenOldUuidNewUuid>,
    TError =
        | GetChangesBelangenOldUuidNewUuid404
        | GetChangesBelangenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBelangenOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBelangenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBelangenOldUuidNewUuid>
    > = () => getChangesBelangenOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBelangenOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsdoelenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidsdoelenOldUuidNewUuid200>({
        url: `/changes/beleidsdoelen/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidsdoelenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsdoelen/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidsdoelenOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>,
    TError =
        | GetChangesBeleidsdoelenOldUuidNewUuid404
        | GetChangesBeleidsdoelenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsdoelenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>
    > = () => getChangesBeleidsdoelenOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidskeuzesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidskeuzesOldUuidNewUuid200>({
        url: `/changes/beleidskeuzes/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidskeuzesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidskeuzes/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidskeuzesOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>,
    TError =
        | GetChangesBeleidskeuzesOldUuidNewUuid404
        | GetChangesBeleidskeuzesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidskeuzesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>
    > = () => getChangesBeleidskeuzesOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsmodulesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidsmodulesOldUuidNewUuid200>({
        url: `/changes/beleidsmodules/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidsmodulesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsmodules/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidsmodulesOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>,
    TError =
        | GetChangesBeleidsmodulesOldUuidNewUuid404
        | GetChangesBeleidsmodulesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsmodulesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>
    > = () => getChangesBeleidsmodulesOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsprestatiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidsprestatiesOldUuidNewUuid200>({
        url: `/changes/beleidsprestaties/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidsprestatiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsprestaties/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidsprestatiesOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>,
    TError =
        | GetChangesBeleidsprestatiesOldUuidNewUuid404
        | GetChangesBeleidsprestatiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsprestatiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>
    > = () => getChangesBeleidsprestatiesOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsregelsOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidsregelsOldUuidNewUuid200>({
        url: `/changes/beleidsregels/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidsregelsOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsregels/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidsregelsOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>,
    TError =
        | GetChangesBeleidsregelsOldUuidNewUuid404
        | GetChangesBeleidsregelsOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsregelsOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>
    > = () => getChangesBeleidsregelsOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsrelatiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesBeleidsrelatiesOldUuidNewUuid200>({
        url: `/changes/beleidsrelaties/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesBeleidsrelatiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsrelaties/${oldUuid}/${newUuid}`]

export const useGetChangesBeleidsrelatiesOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>,
    TError =
        | GetChangesBeleidsrelatiesOldUuidNewUuid404
        | GetChangesBeleidsrelatiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsrelatiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>
    > = () => getChangesBeleidsrelatiesOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesMaatregelenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesMaatregelenOldUuidNewUuid200>({
        url: `/changes/maatregelen/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesMaatregelenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/maatregelen/${oldUuid}/${newUuid}`]

export const useGetChangesMaatregelenOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesMaatregelenOldUuidNewUuid>,
    TError =
        | GetChangesMaatregelenOldUuidNewUuid404
        | GetChangesMaatregelenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesMaatregelenOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesMaatregelenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesMaatregelenOldUuidNewUuid>
    > = () => getChangesMaatregelenOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesMaatregelenOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesThemasOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesThemasOldUuidNewUuid200>({
        url: `/changes/themas/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesThemasOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/themas/${oldUuid}/${newUuid}`]

export const useGetChangesThemasOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesThemasOldUuidNewUuid>,
    TError =
        | GetChangesThemasOldUuidNewUuid404
        | GetChangesThemasOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesThemasOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesThemasOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesThemasOldUuidNewUuid>
    > = () => getChangesThemasOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesThemasOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesVerordeningenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesVerordeningenOldUuidNewUuid200>({
        url: `/changes/verordeningen/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesVerordeningenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/verordeningen/${oldUuid}/${newUuid}`]

export const useGetChangesVerordeningenOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesVerordeningenOldUuidNewUuid>,
    TError =
        | GetChangesVerordeningenOldUuidNewUuid404
        | GetChangesVerordeningenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesVerordeningenOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesVerordeningenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesVerordeningenOldUuidNewUuid>
    > = () => getChangesVerordeningenOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesVerordeningenOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesWerkingsgebiedenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string
) => {
    return customInstance<GetChangesWerkingsgebiedenOldUuidNewUuid200>({
        url: `/changes/werkingsgebieden/${oldUuid}/${newUuid}`,
        method: 'get',
    })
}

export const getGetChangesWerkingsgebiedenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/werkingsgebieden/${oldUuid}/${newUuid}`]

export const useGetChangesWerkingsgebiedenOldUuidNewUuid = <
    TData = AsyncReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>,
    TError =
        | GetChangesWerkingsgebiedenOldUuidNewUuid404
        | GetChangesWerkingsgebiedenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesWerkingsgebiedenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>
    > = () => getChangesWerkingsgebiedenOldUuidNewUuid(oldUuid, newUuid)

    const query = useQuery<
        AsyncReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!(oldUuid && newUuid), ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getMaatregelen = (params?: GetMaatregelenParams) => {
    return customInstance<MaatregelenRead[]>({
        url: `/maatregelen`,
        method: 'get',
        params,
    })
}

export const getGetMaatregelenQueryKey = (params?: GetMaatregelenParams) => [
    `/maatregelen`,
    ...(params ? [params] : []),
]

export const useGetMaatregelen = <
    TData = AsyncReturnType<typeof getMaatregelen>,
    TError = GetMaatregelen400
>(
    params?: GetMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getMaatregelen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetMaatregelenQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getMaatregelen>> = () =>
        getMaatregelen(params)

    const query = useQuery<
        AsyncReturnType<typeof getMaatregelen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new maatregelen lineage
 */
export const postMaatregelen = (maatregelenWrite: MaatregelenWrite) => {
    return customInstance<MaatregelenRead>({
        url: `/maatregelen`,
        method: 'post',
        data: maatregelenWrite,
    })
}

export const usePostMaatregelen = <
    TError = PostMaatregelen400 | PostMaatregelen403 | PostMaatregelen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postMaatregelen>,
        TError,
        { data: MaatregelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postMaatregelen>,
        { data: MaatregelenWrite }
    > = props => {
        const { data } = props || {}

        return postMaatregelen(data)
    }

    return useMutation<
        AsyncReturnType<typeof postMaatregelen>,
        TError,
        { data: MaatregelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getMaatregelenLineageId = (
    lineageId: number,
    params?: GetMaatregelenLineageIdParams
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/maatregelen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetMaatregelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetMaatregelenLineageIdParams
) => [`/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export const useGetMaatregelenLineageId = <
    TData = AsyncReturnType<typeof getMaatregelenLineageId>,
    TError = GetMaatregelenLineageId404
>(
    lineageId: number,
    params?: GetMaatregelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getMaatregelenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMaatregelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getMaatregelenLineageId>
    > = () => getMaatregelenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getMaatregelenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new maatregelen to a lineage
 */
export const patchMaatregelenLineageId = (
    lineageId: number,
    maatregelenWrite: MaatregelenWrite
) => {
    return customInstance<MaatregelenRead>({
        url: `/maatregelen/${lineageId}`,
        method: 'patch',
        data: maatregelenWrite,
    })
}

export const usePatchMaatregelenLineageId = <
    TError =
        | PatchMaatregelenLineageId400
        | PatchMaatregelenLineageId403
        | PatchMaatregelenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchMaatregelenLineageId>,
        TError,
        { lineageId: number; data: MaatregelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchMaatregelenLineageId>,
        { lineageId: number; data: MaatregelenWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchMaatregelenLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchMaatregelenLineageId>,
        TError,
        { lineageId: number; data: MaatregelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Search for objects with a textual query
 */
export const getSearch = (params?: GetSearchParams) => {
    return customInstance<GetSearch200Item[]>({
        url: `/search`,
        method: 'get',
        params,
    })
}

export const getGetSearchQueryKey = (params?: GetSearchParams) => [
    `/search`,
    ...(params ? [params] : []),
]

export const useGetSearch = <
    TData = AsyncReturnType<typeof getSearch>,
    TError = GetSearch400 | GetSearch403
>(
    params?: GetSearchParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSearch>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getSearch>> = () =>
        getSearch(params)

    const query = useQuery<AsyncReturnType<typeof getSearch>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    )

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getThemas = (params?: GetThemasParams) => {
    return customInstance<ThemasRead[]>({
        url: `/themas`,
        method: 'get',
        params,
    })
}

export const getGetThemasQueryKey = (params?: GetThemasParams) => [
    `/themas`,
    ...(params ? [params] : []),
]

export const useGetThemas = <
    TData = AsyncReturnType<typeof getThemas>,
    TError = GetThemas400
>(
    params?: GetThemasParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getThemas>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetThemasQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getThemas>> = () =>
        getThemas(params)

    const query = useQuery<AsyncReturnType<typeof getThemas>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    )

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new themas lineage
 */
export const postThemas = (themasWrite: ThemasWrite) => {
    return customInstance<ThemasRead>({
        url: `/themas`,
        method: 'post',
        data: themasWrite,
    })
}

export const usePostThemas = <
    TError = PostThemas400 | PostThemas403 | PostThemas500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postThemas>,
        TError,
        { data: ThemasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postThemas>,
        { data: ThemasWrite }
    > = props => {
        const { data } = props || {}

        return postThemas(data)
    }

    return useMutation<
        AsyncReturnType<typeof postThemas>,
        TError,
        { data: ThemasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getThemasLineageId = (
    lineageId: number,
    params?: GetThemasLineageIdParams
) => {
    return customInstance<ThemasRead[]>({
        url: `/themas/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetThemasLineageIdQueryKey = (
    lineageId: number,
    params?: GetThemasLineageIdParams
) => [`/themas/${lineageId}`, ...(params ? [params] : [])]

export const useGetThemasLineageId = <
    TData = AsyncReturnType<typeof getThemasLineageId>,
    TError = GetThemasLineageId404
>(
    lineageId: number,
    params?: GetThemasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getThemasLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetThemasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getThemasLineageId>
    > = () => getThemasLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getThemasLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new themas to a lineage
 */
export const patchThemasLineageId = (
    lineageId: number,
    themasWrite: ThemasWrite
) => {
    return customInstance<ThemasRead>({
        url: `/themas/${lineageId}`,
        method: 'patch',
        data: themasWrite,
    })
}

export const usePatchThemasLineageId = <
    TError =
        | PatchThemasLineageId400
        | PatchThemasLineageId403
        | PatchThemasLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchThemasLineageId>,
        TError,
        { lineageId: number; data: ThemasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchThemasLineageId>,
        { lineageId: number; data: ThemasWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchThemasLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchThemasLineageId>,
        TError,
        { lineageId: number; data: ThemasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the ambities lineages and shows the latests valid object for each
 */
export const getValidAmbities = (params?: GetValidAmbitiesParams) => {
    return customInstance<AmbitiesRead[]>({
        url: `/valid/ambities`,
        method: 'get',
        params,
    })
}

export const getGetValidAmbitiesQueryKey = (
    params?: GetValidAmbitiesParams
) => [`/valid/ambities`, ...(params ? [params] : [])]

export const useGetValidAmbities = <
    TData = AsyncReturnType<typeof getValidAmbities>,
    TError = GetValidAmbities404
>(
    params?: GetValidAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidAmbities>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidAmbitiesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidAmbities>
    > = () => getValidAmbities(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidAmbities>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the ambities in this lineage that are valid
 */
export const getValidAmbitiesLineageId = (
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/valid/ambities/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidAmbitiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams
) => [`/valid/ambities/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidAmbitiesLineageId = <
    TData = AsyncReturnType<typeof getValidAmbitiesLineageId>,
    TError = GetValidAmbitiesLineageId404
>(
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidAmbitiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidAmbitiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidAmbitiesLineageId>
    > = () => getValidAmbitiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidAmbitiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the belangen lineages and shows the latests valid object for each
 */
export const getValidBelangen = (params?: GetValidBelangenParams) => {
    return customInstance<BelangenRead[]>({
        url: `/valid/belangen`,
        method: 'get',
        params,
    })
}

export const getGetValidBelangenQueryKey = (
    params?: GetValidBelangenParams
) => [`/valid/belangen`, ...(params ? [params] : [])]

export const useGetValidBelangen = <
    TData = AsyncReturnType<typeof getValidBelangen>,
    TError = GetValidBelangen404
>(
    params?: GetValidBelangenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBelangen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBelangenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBelangen>
    > = () => getValidBelangen(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBelangen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the belangen in this lineage that are valid
 */
export const getValidBelangenLineageId = (
    lineageId: number,
    params?: GetValidBelangenLineageIdParams
) => {
    return customInstance<BelangenRead[]>({
        url: `/valid/belangen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBelangenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBelangenLineageIdParams
) => [`/valid/belangen/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBelangenLineageId = <
    TData = AsyncReturnType<typeof getValidBelangenLineageId>,
    TError = GetValidBelangenLineageId404
>(
    lineageId: number,
    params?: GetValidBelangenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBelangenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBelangenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBelangenLineageId>
    > = () => getValidBelangenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBelangenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests valid object for each
 */
export const getValidBeleidsdoelen = (params?: GetValidBeleidsdoelenParams) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/valid/beleidsdoelen`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsdoelenQueryKey = (
    params?: GetValidBeleidsdoelenParams
) => [`/valid/beleidsdoelen`, ...(params ? [params] : [])]

export const useGetValidBeleidsdoelen = <
    TData = AsyncReturnType<typeof getValidBeleidsdoelen>,
    TError = GetValidBeleidsdoelen404
>(
    params?: GetValidBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsdoelen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsdoelen>
    > = () => getValidBeleidsdoelen(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsdoelen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsdoelen in this lineage that are valid
 */
export const getValidBeleidsdoelenLineageId = (
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/valid/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsdoelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams
) => [`/valid/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidsdoelenLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidsdoelenLineageId>,
    TError = GetValidBeleidsdoelenLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsdoelenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsdoelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsdoelenLineageId>
    > = () => getValidBeleidsdoelenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsdoelenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests valid object for each
 */
export const getValidBeleidskeuzes = (params?: GetValidBeleidskeuzesParams) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/valid/beleidskeuzes`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidskeuzesQueryKey = (
    params?: GetValidBeleidskeuzesParams
) => [`/valid/beleidskeuzes`, ...(params ? [params] : [])]

export const useGetValidBeleidskeuzes = <
    TData = AsyncReturnType<typeof getValidBeleidskeuzes>,
    TError = GetValidBeleidskeuzes404
>(
    params?: GetValidBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidskeuzes>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidskeuzes>
    > = () => getValidBeleidskeuzes(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidskeuzes>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidskeuzes in this lineage that are valid
 */
export const getValidBeleidskeuzesLineageId = (
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/valid/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidskeuzesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams
) => [`/valid/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidskeuzesLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidskeuzesLineageId>,
    TError = GetValidBeleidskeuzesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidskeuzesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidskeuzesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidskeuzesLineageId>
    > = () => getValidBeleidskeuzesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidskeuzesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests valid object for each
 */
export const getValidBeleidsmodules = (
    params?: GetValidBeleidsmodulesParams
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/valid/beleidsmodules`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsmodulesQueryKey = (
    params?: GetValidBeleidsmodulesParams
) => [`/valid/beleidsmodules`, ...(params ? [params] : [])]

export const useGetValidBeleidsmodules = <
    TData = AsyncReturnType<typeof getValidBeleidsmodules>,
    TError = GetValidBeleidsmodules404
>(
    params?: GetValidBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsmodules>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsmodules>
    > = () => getValidBeleidsmodules(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsmodules>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsmodules in this lineage that are valid
 */
export const getValidBeleidsmodulesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/valid/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsmodulesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams
) => [`/valid/beleidsmodules/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidsmodulesLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidsmodulesLineageId>,
    TError = GetValidBeleidsmodulesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsmodulesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsmodulesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsmodulesLineageId>
    > = () => getValidBeleidsmodulesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsmodulesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests valid object for each
 */
export const getValidBeleidsprestaties = (
    params?: GetValidBeleidsprestatiesParams
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/valid/beleidsprestaties`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsprestatiesQueryKey = (
    params?: GetValidBeleidsprestatiesParams
) => [`/valid/beleidsprestaties`, ...(params ? [params] : [])]

export const useGetValidBeleidsprestaties = <
    TData = AsyncReturnType<typeof getValidBeleidsprestaties>,
    TError = GetValidBeleidsprestaties404
>(
    params?: GetValidBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsprestaties>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsprestaties>
    > = () => getValidBeleidsprestaties(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsprestaties>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsprestaties in this lineage that are valid
 */
export const getValidBeleidsprestatiesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/valid/beleidsprestaties/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsprestatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams
) => [`/valid/beleidsprestaties/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidsprestatiesLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidsprestatiesLineageId>,
    TError = GetValidBeleidsprestatiesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsprestatiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsprestatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsprestatiesLineageId>
    > = () => getValidBeleidsprestatiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsprestatiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests valid object for each
 */
export const getValidBeleidsregels = (params?: GetValidBeleidsregelsParams) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/valid/beleidsregels`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsregelsQueryKey = (
    params?: GetValidBeleidsregelsParams
) => [`/valid/beleidsregels`, ...(params ? [params] : [])]

export const useGetValidBeleidsregels = <
    TData = AsyncReturnType<typeof getValidBeleidsregels>,
    TError = GetValidBeleidsregels404
>(
    params?: GetValidBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsregels>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsregels>
    > = () => getValidBeleidsregels(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsregels>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsregels in this lineage that are valid
 */
export const getValidBeleidsregelsLineageId = (
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/valid/beleidsregels/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsregelsLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams
) => [`/valid/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidsregelsLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidsregelsLineageId>,
    TError = GetValidBeleidsregelsLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsregelsLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsregelsLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsregelsLineageId>
    > = () => getValidBeleidsregelsLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsregelsLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests valid object for each
 */
export const getValidBeleidsrelaties = (
    params?: GetValidBeleidsrelatiesParams
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/valid/beleidsrelaties`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsrelatiesQueryKey = (
    params?: GetValidBeleidsrelatiesParams
) => [`/valid/beleidsrelaties`, ...(params ? [params] : [])]

export const useGetValidBeleidsrelaties = <
    TData = AsyncReturnType<typeof getValidBeleidsrelaties>,
    TError = GetValidBeleidsrelaties404
>(
    params?: GetValidBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsrelaties>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsrelaties>
    > = () => getValidBeleidsrelaties(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsrelaties>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsrelaties in this lineage that are valid
 */
export const getValidBeleidsrelatiesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/valid/beleidsrelaties/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidBeleidsrelatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams
) => [`/valid/beleidsrelaties/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidBeleidsrelatiesLineageId = <
    TData = AsyncReturnType<typeof getValidBeleidsrelatiesLineageId>,
    TError = GetValidBeleidsrelatiesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidBeleidsrelatiesLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsrelatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidBeleidsrelatiesLineageId>
    > = () => getValidBeleidsrelatiesLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidBeleidsrelatiesLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests valid object for each
 */
export const getValidMaatregelen = (params?: GetValidMaatregelenParams) => {
    return customInstance<MaatregelenRead[]>({
        url: `/valid/maatregelen`,
        method: 'get',
        params,
    })
}

export const getGetValidMaatregelenQueryKey = (
    params?: GetValidMaatregelenParams
) => [`/valid/maatregelen`, ...(params ? [params] : [])]

export const useGetValidMaatregelen = <
    TData = AsyncReturnType<typeof getValidMaatregelen>,
    TError = GetValidMaatregelen404
>(
    params?: GetValidMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidMaatregelen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidMaatregelenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidMaatregelen>
    > = () => getValidMaatregelen(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidMaatregelen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the maatregelen in this lineage that are valid
 */
export const getValidMaatregelenLineageId = (
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/valid/maatregelen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidMaatregelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams
) => [`/valid/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidMaatregelenLineageId = <
    TData = AsyncReturnType<typeof getValidMaatregelenLineageId>,
    TError = GetValidMaatregelenLineageId404
>(
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidMaatregelenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidMaatregelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidMaatregelenLineageId>
    > = () => getValidMaatregelenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidMaatregelenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the themas lineages and shows the latests valid object for each
 */
export const getValidThemas = (params?: GetValidThemasParams) => {
    return customInstance<ThemasRead[]>({
        url: `/valid/themas`,
        method: 'get',
        params,
    })
}

export const getGetValidThemasQueryKey = (params?: GetValidThemasParams) => [
    `/valid/themas`,
    ...(params ? [params] : []),
]

export const useGetValidThemas = <
    TData = AsyncReturnType<typeof getValidThemas>,
    TError = GetValidThemas404
>(
    params?: GetValidThemasParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidThemas>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey = queryOptions?.queryKey ?? getGetValidThemasQueryKey(params)

    const queryFn: QueryFunction<AsyncReturnType<typeof getValidThemas>> = () =>
        getValidThemas(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidThemas>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the themas in this lineage that are valid
 */
export const getValidThemasLineageId = (
    lineageId: number,
    params?: GetValidThemasLineageIdParams
) => {
    return customInstance<ThemasRead[]>({
        url: `/valid/themas/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidThemasLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidThemasLineageIdParams
) => [`/valid/themas/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidThemasLineageId = <
    TData = AsyncReturnType<typeof getValidThemasLineageId>,
    TError = GetValidThemasLineageId404
>(
    lineageId: number,
    params?: GetValidThemasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidThemasLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidThemasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidThemasLineageId>
    > = () => getValidThemasLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidThemasLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests valid object for each
 */
export const getValidVerordeningen = (params?: GetValidVerordeningenParams) => {
    return customInstance<VerordeningenRead[]>({
        url: `/valid/verordeningen`,
        method: 'get',
        params,
    })
}

export const getGetValidVerordeningenQueryKey = (
    params?: GetValidVerordeningenParams
) => [`/valid/verordeningen`, ...(params ? [params] : [])]

export const useGetValidVerordeningen = <
    TData = AsyncReturnType<typeof getValidVerordeningen>,
    TError = GetValidVerordeningen404
>(
    params?: GetValidVerordeningenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidVerordeningen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidVerordeningenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidVerordeningen>
    > = () => getValidVerordeningen(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidVerordeningen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the verordeningen in this lineage that are valid
 */
export const getValidVerordeningenLineageId = (
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/valid/verordeningen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidVerordeningenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams
) => [`/valid/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidVerordeningenLineageId = <
    TData = AsyncReturnType<typeof getValidVerordeningenLineageId>,
    TError = GetValidVerordeningenLineageId404
>(
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidVerordeningenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidVerordeningenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidVerordeningenLineageId>
    > = () => getValidVerordeningenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidVerordeningenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests valid object for each
 */
export const getValidWerkingsgebieden = (
    params?: GetValidWerkingsgebiedenParams
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/valid/werkingsgebieden`,
        method: 'get',
        params,
    })
}

export const getGetValidWerkingsgebiedenQueryKey = (
    params?: GetValidWerkingsgebiedenParams
) => [`/valid/werkingsgebieden`, ...(params ? [params] : [])]

export const useGetValidWerkingsgebieden = <
    TData = AsyncReturnType<typeof getValidWerkingsgebieden>,
    TError = GetValidWerkingsgebieden404
>(
    params?: GetValidWerkingsgebiedenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidWerkingsgebieden>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidWerkingsgebiedenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidWerkingsgebieden>
    > = () => getValidWerkingsgebieden(params)

    const query = useQuery<
        AsyncReturnType<typeof getValidWerkingsgebieden>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the werkingsgebieden in this lineage that are valid
 */
export const getValidWerkingsgebiedenLineageId = (
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/valid/werkingsgebieden/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetValidWerkingsgebiedenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams
) => [`/valid/werkingsgebieden/${lineageId}`, ...(params ? [params] : [])]

export const useGetValidWerkingsgebiedenLineageId = <
    TData = AsyncReturnType<typeof getValidWerkingsgebiedenLineageId>,
    TError = GetValidWerkingsgebiedenLineageId404
>(
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getValidWerkingsgebiedenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidWerkingsgebiedenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getValidWerkingsgebiedenLineageId>
    > = () => getValidWerkingsgebiedenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getValidWerkingsgebiedenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVerordeningen = (params?: GetVerordeningenParams) => {
    return customInstance<VerordeningenRead[]>({
        url: `/verordeningen`,
        method: 'get',
        params,
    })
}

export const getGetVerordeningenQueryKey = (
    params?: GetVerordeningenParams
) => [`/verordeningen`, ...(params ? [params] : [])]

export const useGetVerordeningen = <
    TData = AsyncReturnType<typeof getVerordeningen>,
    TError = GetVerordeningen400
>(
    params?: GetVerordeningenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVerordeningen>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetVerordeningenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVerordeningen>
    > = () => getVerordeningen(params)

    const query = useQuery<
        AsyncReturnType<typeof getVerordeningen>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new verordeningen lineage
 */
export const postVerordeningen = (verordeningenWrite: VerordeningenWrite) => {
    return customInstance<VerordeningenRead>({
        url: `/verordeningen`,
        method: 'post',
        data: verordeningenWrite,
    })
}

export const usePostVerordeningen = <
    TError = PostVerordeningen400 | PostVerordeningen403 | PostVerordeningen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postVerordeningen>,
        TError,
        { data: VerordeningenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postVerordeningen>,
        { data: VerordeningenWrite }
    > = props => {
        const { data } = props || {}

        return postVerordeningen(data)
    }

    return useMutation<
        AsyncReturnType<typeof postVerordeningen>,
        TError,
        { data: VerordeningenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVerordeningenLineageId = (
    lineageId: number,
    params?: GetVerordeningenLineageIdParams
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/verordeningen/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetVerordeningenLineageIdQueryKey = (
    lineageId: number,
    params?: GetVerordeningenLineageIdParams
) => [`/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export const useGetVerordeningenLineageId = <
    TData = AsyncReturnType<typeof getVerordeningenLineageId>,
    TError = GetVerordeningenLineageId404
>(
    lineageId: number,
    params?: GetVerordeningenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVerordeningenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVerordeningenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVerordeningenLineageId>
    > = () => getVerordeningenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getVerordeningenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Adds a new verordeningen to a lineage
 */
export const patchVerordeningenLineageId = (
    lineageId: number,
    verordeningenWrite: VerordeningenWrite
) => {
    return customInstance<VerordeningenRead>({
        url: `/verordeningen/${lineageId}`,
        method: 'patch',
        data: verordeningenWrite,
    })
}

export const usePatchVerordeningenLineageId = <
    TError =
        | PatchVerordeningenLineageId400
        | PatchVerordeningenLineageId403
        | PatchVerordeningenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof patchVerordeningenLineageId>,
        TError,
        { lineageId: number; data: VerordeningenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options || {}

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof patchVerordeningenLineageId>,
        { lineageId: number; data: VerordeningenWrite }
    > = props => {
        const { lineageId, data } = props || {}

        return patchVerordeningenLineageId(lineageId, data)
    }

    return useMutation<
        AsyncReturnType<typeof patchVerordeningenLineageId>,
        TError,
        { lineageId: number; data: VerordeningenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getVersionAmbitiesObjectUuid = (objectUuid: string) => {
    return customInstance<AmbitiesRead>({
        url: `/version/ambities/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionAmbitiesObjectUuidQueryKey = (objectUuid: string) => [
    `/version/ambities/${objectUuid}`,
]

export const useGetVersionAmbitiesObjectUuid = <
    TData = AsyncReturnType<typeof getVersionAmbitiesObjectUuid>,
    TError = GetVersionAmbitiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionAmbitiesObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionAmbitiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionAmbitiesObjectUuid>
    > = () => getVersionAmbitiesObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionAmbitiesObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getVersionBelangenObjectUuid = (objectUuid: string) => {
    return customInstance<BelangenRead>({
        url: `/version/belangen/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBelangenObjectUuidQueryKey = (objectUuid: string) => [
    `/version/belangen/${objectUuid}`,
]

export const useGetVersionBelangenObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBelangenObjectUuid>,
    TError = GetVersionBelangenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBelangenObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBelangenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBelangenObjectUuid>
    > = () => getVersionBelangenObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBelangenObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getVersionBeleidsdoelenObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/version/beleidsdoelen/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidsdoelenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsdoelen/${objectUuid}`]

export const useGetVersionBeleidsdoelenObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidsdoelenObjectUuid>,
    TError = GetVersionBeleidsdoelenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidsdoelenObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsdoelenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidsdoelenObjectUuid>
    > = () => getVersionBeleidsdoelenObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidsdoelenObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getVersionBeleidskeuzesObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/version/beleidskeuzes/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidskeuzesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidskeuzes/${objectUuid}`]

export const useGetVersionBeleidskeuzesObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidskeuzesObjectUuid>,
    TError = GetVersionBeleidskeuzesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidskeuzesObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidskeuzesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidskeuzesObjectUuid>
    > = () => getVersionBeleidskeuzesObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidskeuzesObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getVersionBeleidsmodulesObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/version/beleidsmodules/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidsmodulesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsmodules/${objectUuid}`]

export const useGetVersionBeleidsmodulesObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidsmodulesObjectUuid>,
    TError = GetVersionBeleidsmodulesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidsmodulesObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsmodulesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidsmodulesObjectUuid>
    > = () => getVersionBeleidsmodulesObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidsmodulesObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getVersionBeleidsprestatiesObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/version/beleidsprestaties/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidsprestatiesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsprestaties/${objectUuid}`]

export const useGetVersionBeleidsprestatiesObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidsprestatiesObjectUuid>,
    TError = GetVersionBeleidsprestatiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidsprestatiesObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsprestatiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidsprestatiesObjectUuid>
    > = () => getVersionBeleidsprestatiesObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidsprestatiesObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getVersionBeleidsregelsObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidsregelsRead>({
        url: `/version/beleidsregels/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidsregelsObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsregels/${objectUuid}`]

export const useGetVersionBeleidsregelsObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidsregelsObjectUuid>,
    TError = GetVersionBeleidsregelsObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidsregelsObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsregelsObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidsregelsObjectUuid>
    > = () => getVersionBeleidsregelsObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidsregelsObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getVersionBeleidsrelatiesObjectUuid = (objectUuid: string) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/version/beleidsrelaties/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionBeleidsrelatiesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsrelaties/${objectUuid}`]

export const useGetVersionBeleidsrelatiesObjectUuid = <
    TData = AsyncReturnType<typeof getVersionBeleidsrelatiesObjectUuid>,
    TError = GetVersionBeleidsrelatiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionBeleidsrelatiesObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsrelatiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionBeleidsrelatiesObjectUuid>
    > = () => getVersionBeleidsrelatiesObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionBeleidsrelatiesObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getVersionMaatregelenObjectUuid = (objectUuid: string) => {
    return customInstance<MaatregelenRead>({
        url: `/version/maatregelen/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionMaatregelenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/maatregelen/${objectUuid}`]

export const useGetVersionMaatregelenObjectUuid = <
    TData = AsyncReturnType<typeof getVersionMaatregelenObjectUuid>,
    TError = GetVersionMaatregelenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionMaatregelenObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionMaatregelenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionMaatregelenObjectUuid>
    > = () => getVersionMaatregelenObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionMaatregelenObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getVersionThemasObjectUuid = (objectUuid: string) => {
    return customInstance<ThemasRead>({
        url: `/version/themas/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionThemasObjectUuidQueryKey = (objectUuid: string) => [
    `/version/themas/${objectUuid}`,
]

export const useGetVersionThemasObjectUuid = <
    TData = AsyncReturnType<typeof getVersionThemasObjectUuid>,
    TError = GetVersionThemasObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionThemasObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionThemasObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionThemasObjectUuid>
    > = () => getVersionThemasObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionThemasObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVersionVerordeningenObjectUuid = (objectUuid: string) => {
    return customInstance<VerordeningenRead>({
        url: `/version/verordeningen/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionVerordeningenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/verordeningen/${objectUuid}`]

export const useGetVersionVerordeningenObjectUuid = <
    TData = AsyncReturnType<typeof getVersionVerordeningenObjectUuid>,
    TError = GetVersionVerordeningenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionVerordeningenObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionVerordeningenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionVerordeningenObjectUuid>
    > = () => getVersionVerordeningenObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionVerordeningenObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getVersionWerkingsgebiedenObjectUuid = (objectUuid: string) => {
    return customInstance<WerkingsgebiedenRead>({
        url: `/version/werkingsgebieden/${objectUuid}`,
        method: 'get',
    })
}

export const getGetVersionWerkingsgebiedenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/werkingsgebieden/${objectUuid}`]

export const useGetVersionWerkingsgebiedenObjectUuid = <
    TData = AsyncReturnType<typeof getVersionWerkingsgebiedenObjectUuid>,
    TError = GetVersionWerkingsgebiedenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getVersionWerkingsgebiedenObjectUuid>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionWerkingsgebiedenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getVersionWerkingsgebiedenObjectUuid>
    > = () => getVersionWerkingsgebiedenObjectUuid(objectUuid)

    const query = useQuery<
        AsyncReturnType<typeof getVersionWerkingsgebiedenObjectUuid>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!objectUuid, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getWerkingsgebieden = (params?: GetWerkingsgebiedenParams) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/werkingsgebieden`,
        method: 'get',
        params,
    })
}

export const getGetWerkingsgebiedenQueryKey = (
    params?: GetWerkingsgebiedenParams
) => [`/werkingsgebieden`, ...(params ? [params] : [])]

export const useGetWerkingsgebieden = <
    TData = AsyncReturnType<typeof getWerkingsgebieden>,
    TError = GetWerkingsgebieden400
>(
    params?: GetWerkingsgebiedenParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getWerkingsgebieden>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ?? getGetWerkingsgebiedenQueryKey(params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getWerkingsgebieden>
    > = () => getWerkingsgebieden(params)

    const query = useQuery<
        AsyncReturnType<typeof getWerkingsgebieden>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getWerkingsgebiedenLineageId = (
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/werkingsgebieden/${lineageId}`,
        method: 'get',
        params,
    })
}

export const getGetWerkingsgebiedenLineageIdQueryKey = (
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams
) => [`/werkingsgebieden/${lineageId}`, ...(params ? [params] : [])]

export const useGetWerkingsgebiedenLineageId = <
    TData = AsyncReturnType<typeof getWerkingsgebiedenLineageId>,
    TError = GetWerkingsgebiedenLineageId404
>(
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getWerkingsgebiedenLineageId>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetWerkingsgebiedenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getWerkingsgebiedenLineageId>
    > = () => getWerkingsgebiedenLineageId(lineageId, params)

    const query = useQuery<
        AsyncReturnType<typeof getWerkingsgebiedenLineageId>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!lineageId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}
